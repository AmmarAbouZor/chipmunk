// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

/**
 * Contains the informations for an invalid plugin.
 */
export type InvalidPluginInfo = {
    /**
     * Error message describing why the plugin is invalid.
     */
    error_msg: string;
};

/**
 * Provides additional information to be rendered in the log view.
 */
export type ParserRenderOptions = {
    /**
     * List of strings representing the header names to be rendered at the top of log messages.
     * This list allows users to specify which columns are visible as well.
     *
     * # Note
     * Headers should be provided only if the log messages have multiple columns, and their
     * count must match the count of the columns of the log message as well.
     */
    headers: Array<string> | null;
};

/**
 * General settings for all byte-sources as plugins
 */
export type PluginByteSourceGeneralSettings = { placeholder: string };

/**
 * Settings for the Plugin Byte-Sources.
 */
export type PluginByteSourceSettings = {
    plugin_path: string;
    general_settings: PluginByteSourceGeneralSettings;
    plugin_configs: Array<PluginConfigItem>;
};

/**
 * Represents a configuration item, which includes an identifier and its corresponding value.
 */
export type PluginConfigItem = { id: string; value: PluginConfigValue };

/**
 * Represents the schema for a configuration item.
 */
export type PluginConfigSchemaItem = {
    id: string;
    title: string;
    description: string | null;
    input_type: PluginConfigSchemaType;
};

/**
 * Defines the possible input types for configuration schemas.
 */
export type PluginConfigSchemaType =
    | 'Boolean'
    | 'Integer'
    | 'Float'
    | 'Text'
    | 'Directories'
    | { Files: Array<string> }
    | { Dropdown: Array<string> };

/**
 * Represents the value of a configuration item.
 */
export type PluginConfigValue =
    | { Boolean: boolean }
    | { Integer: number }
    | { Float: number }
    | { Text: string }
    | { Directories: Array<string> }
    | { Files: Array<string> }
    | { Dropdown: string };

/**
 * Represents a plugin entity informations and configurations.
 */
export type PluginEntity = {
    dir_path: string;
    plugin_type: PluginType;
    state: PluginState;
    metadata: PluginMetadata | null;
};

/**
 * Represents the plugins metadata like name, description...
 */
export type PluginMetadata = { name: string; description: string | null };

/**
 * General settings for all parsers as plugins
 */
export type PluginParserGeneralSettings = { placeholder: string };

/**
 * Settings for the Plugins parser.
 */
export type PluginParserSettings = {
    plugin_path: string;
    general_settings: PluginParserGeneralSettings;
    plugin_configs: Array<PluginConfigItem>;
};

/**
 * Represents the plugins states and their corresponding informations.
 */
export type PluginState = { Active: ValidPluginInfo } | { Invalid: InvalidPluginInfo };

/**
 * Represents plugins main types
 */
export type PluginType = 'Parser' | 'ByteSource';

/**
 * Represents a list of [`PluginEntity`].
 */
export type PluginsList = Array<PluginEntity>;

/**
 * Represents the render options (columns headers, etc.) for the plugins.
 */
export type RenderOptions = { Parser: ParserRenderOptions } | 'ByteSource';

/**
 * Represents the semantic version used in the plugins system.
 */
export type SemanticVersion = { major: number; minor: number; patch: number };

/**
 * Contains the infos and options for a valid plugin.
 */
export type ValidPluginInfo = {
    wasm_file_path: string;
    api_version: SemanticVersion;
    plugin_version: SemanticVersion;
    config_schemas: Array<PluginConfigSchemaItem>;
    render_options: RenderOptions;
};
