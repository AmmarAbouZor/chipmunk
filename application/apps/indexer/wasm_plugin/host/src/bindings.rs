// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod host {
        #[allow(dead_code)]
        pub mod parse {
            #[allow(dead_code, clippy::all)]
            pub mod parsing {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct Attachment {
                    pub name: _rt::String,
                    pub size: u64,
                    pub created_date: Option<_rt::String>,
                    pub modified_date: Option<_rt::String>,
                    pub messages: _rt::Vec<u64>,
                    pub data: _rt::Vec<u8>,
                }
                impl ::core::fmt::Debug for Attachment {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Attachment")
                            .field("name", &self.name)
                            .field("size", &self.size)
                            .field("created-date", &self.created_date)
                            .field("modified-date", &self.modified_date)
                            .field("messages", &self.messages)
                            .field("data", &self.data)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum ParseYield {
                    Message(_rt::String),
                    Attachment(Attachment),
                    MessageAndAttachment((_rt::String, Attachment)),
                }
                impl ::core::fmt::Debug for ParseYield {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ParseYield::Message(e) => {
                                f.debug_tuple("ParseYield::Message").field(e).finish()
                            }
                            ParseYield::Attachment(e) => {
                                f.debug_tuple("ParseYield::Attachment").field(e).finish()
                            }
                            ParseYield::MessageAndAttachment(e) => f
                                .debug_tuple("ParseYield::MessageAndAttachment")
                                .field(e)
                                .finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct ParseReturn {
                    pub value: Option<ParseYield>,
                    pub cursor: u64,
                }
                impl ::core::fmt::Debug for ParseReturn {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ParseReturn")
                            .field("value", &self.value)
                            .field("cursor", &self.cursor)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum Error {
                    Parse(_rt::String),
                    Incomplete,
                    Eof,
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Error::Parse(e) => f.debug_tuple("Error::Parse").field(e).finish(),
                            Error::Incomplete => f.debug_tuple("Error::Incomplete").finish(),
                            Error::Eof => f.debug_tuple("Error::Eof").finish(),
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Parser {
                    handle: _rt::Resource<Parser>,
                }

                type _ParserRep<T> = Option<T>;

                impl Parser {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Parser`.
                    pub fn new<T: GuestParser>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ParserRep<T> = Some(val);
                        let ptr: *mut _ParserRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestParser>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestParser>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestParser>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestParser` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ParserRep<T>);
                    }

                    fn as_ptr<T: GuestParser>(&self) -> *mut _ParserRep<T> {
                        Parser::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Parser`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ParserBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Parser>,
                }

                impl<'a> ParserBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestParser>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ParserRep<T> {
                        Parser::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Parser {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]host:parse/parsing")]
                            extern "C" {
                                #[link_name = "[resource-drop]parser"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_parser_cabi<T: GuestParser>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = Parser::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parser_parse_cabi<T: GuestParser>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let result1 = T::parse(
                        ParserBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::Vec::from_raw_parts(arg1.cast(), len0, len0),
                        match arg3 {
                            0 => None,
                            1 => {
                                let e = arg4 as u64;
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec20 = result1;
                    let len20 = vec20.len();
                    let layout20 =
                        _rt::alloc::Layout::from_size_align_unchecked(vec20.len() * 96, 8);
                    let result20 = if layout20.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout20);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec20.into_iter().enumerate() {
                        let base = result20.add(i * 96);
                        {
                            match e {
                                Ok(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let ParseReturn {
                                        value: value3,
                                        cursor: cursor3,
                                    } = e;
                                    match value3 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                ParseYield::Message(e) => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                                    let len4 = vec4.len();
                                                    ::core::mem::forget(vec4);
                                                    *base.add(28).cast::<usize>() = len4;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr4.cast_mut();
                                                }
                                                ParseYield::Attachment(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    let Attachment {
                                                        name: name5,
                                                        size: size5,
                                                        created_date: created_date5,
                                                        modified_date: modified_date5,
                                                        messages: messages5,
                                                        data: data5,
                                                    } = e;
                                                    let vec6 =
                                                        (name5.into_bytes()).into_boxed_slice();
                                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                                    let len6 = vec6.len();
                                                    ::core::mem::forget(vec6);
                                                    *base.add(28).cast::<usize>() = len6;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr6.cast_mut();
                                                    *base.add(32).cast::<i64>() =
                                                        _rt::as_i64(size5);
                                                    match created_date5 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() =
                                                                (1i32) as u8;
                                                            let vec7 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                                            let len7 = vec7.len();
                                                            ::core::mem::forget(vec7);
                                                            *base.add(48).cast::<usize>() = len7;
                                                            *base.add(44).cast::<*mut u8>() =
                                                                ptr7.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() =
                                                                (0i32) as u8;
                                                        }
                                                    };
                                                    match modified_date5 {
                                                        Some(e) => {
                                                            *base.add(52).cast::<u8>() =
                                                                (1i32) as u8;
                                                            let vec8 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                            let len8 = vec8.len();
                                                            ::core::mem::forget(vec8);
                                                            *base.add(60).cast::<usize>() = len8;
                                                            *base.add(56).cast::<*mut u8>() =
                                                                ptr8.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(52).cast::<u8>() =
                                                                (0i32) as u8;
                                                        }
                                                    };
                                                    let vec9 = (messages5).into_boxed_slice();
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    ::core::mem::forget(vec9);
                                                    *base.add(68).cast::<usize>() = len9;
                                                    *base.add(64).cast::<*mut u8>() =
                                                        ptr9.cast_mut();
                                                    let vec10 = (data5).into_boxed_slice();
                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                    let len10 = vec10.len();
                                                    ::core::mem::forget(vec10);
                                                    *base.add(76).cast::<usize>() = len10;
                                                    *base.add(72).cast::<*mut u8>() =
                                                        ptr10.cast_mut();
                                                }
                                                ParseYield::MessageAndAttachment(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    let (t11_0, t11_1) = e;
                                                    let vec12 =
                                                        (t11_0.into_bytes()).into_boxed_slice();
                                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                                    let len12 = vec12.len();
                                                    ::core::mem::forget(vec12);
                                                    *base.add(28).cast::<usize>() = len12;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr12.cast_mut();
                                                    let Attachment {
                                                        name: name13,
                                                        size: size13,
                                                        created_date: created_date13,
                                                        modified_date: modified_date13,
                                                        messages: messages13,
                                                        data: data13,
                                                    } = t11_1;
                                                    let vec14 =
                                                        (name13.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base.add(36).cast::<usize>() = len14;
                                                    *base.add(32).cast::<*mut u8>() =
                                                        ptr14.cast_mut();
                                                    *base.add(40).cast::<i64>() =
                                                        _rt::as_i64(size13);
                                                    match created_date13 {
                                                        Some(e) => {
                                                            *base.add(48).cast::<u8>() =
                                                                (1i32) as u8;
                                                            let vec15 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                            let len15 = vec15.len();
                                                            ::core::mem::forget(vec15);
                                                            *base.add(56).cast::<usize>() = len15;
                                                            *base.add(52).cast::<*mut u8>() =
                                                                ptr15.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(48).cast::<u8>() =
                                                                (0i32) as u8;
                                                        }
                                                    };
                                                    match modified_date13 {
                                                        Some(e) => {
                                                            *base.add(60).cast::<u8>() =
                                                                (1i32) as u8;
                                                            let vec16 =
                                                                (e.into_bytes()).into_boxed_slice();
                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                            let len16 = vec16.len();
                                                            ::core::mem::forget(vec16);
                                                            *base.add(68).cast::<usize>() = len16;
                                                            *base.add(64).cast::<*mut u8>() =
                                                                ptr16.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(60).cast::<u8>() =
                                                                (0i32) as u8;
                                                        }
                                                    };
                                                    let vec17 = (messages13).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base.add(76).cast::<usize>() = len17;
                                                    *base.add(72).cast::<*mut u8>() =
                                                        ptr17.cast_mut();
                                                    let vec18 = (data13).into_boxed_slice();
                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                    let len18 = vec18.len();
                                                    ::core::mem::forget(vec18);
                                                    *base.add(84).cast::<usize>() = len18;
                                                    *base.add(80).cast::<*mut u8>() =
                                                        ptr18.cast_mut();
                                                }
                                            }
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    *base.add(88).cast::<i64>() = _rt::as_i64(cursor3);
                                }
                                Err(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    match e {
                                        Error::Parse(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            let vec19 = (e.into_bytes()).into_boxed_slice();
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            ::core::mem::forget(vec19);
                                            *base.add(16).cast::<usize>() = len19;
                                            *base.add(12).cast::<*mut u8>() = ptr19.cast_mut();
                                        }
                                        Error::Incomplete => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                        }
                                        Error::Eof => {
                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                        }
                                    }
                                }
                            };
                        }
                    }
                    *ptr2.add(4).cast::<usize>() = len20;
                    *ptr2.add(0).cast::<*mut u8>() = result20;
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_parser_parse<T: GuestParser>(arg0: *mut u8) {
                    let l38 = *arg0.add(0).cast::<*mut u8>();
                    let l39 = *arg0.add(4).cast::<usize>();
                    let base40 = l38;
                    let len40 = l39;
                    for i in 0..len40 {
                        let base = base40.add(i * 96);
                        {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            match l0 {
                                0 => {
                                    let l1 = i32::from(*base.add(8).cast::<u8>());
                                    match l1 {
                                        0 => (),
                                        _ => {
                                            let l2 = i32::from(*base.add(16).cast::<u8>());
                                            match l2 {
                                                0 => {
                                                    let l3 = *base.add(24).cast::<*mut u8>();
                                                    let l4 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l3, l4, 1);
                                                }
                                                1 => {
                                                    let l5 = *base.add(24).cast::<*mut u8>();
                                                    let l6 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l5, l6, 1);
                                                    let l7 = i32::from(*base.add(40).cast::<u8>());
                                                    match l7 {
                                                        0 => (),
                                                        _ => {
                                                            let l8 =
                                                                *base.add(44).cast::<*mut u8>();
                                                            let l9 = *base.add(48).cast::<usize>();
                                                            _rt::cabi_dealloc(l8, l9, 1);
                                                        }
                                                    }
                                                    let l10 = i32::from(*base.add(52).cast::<u8>());
                                                    match l10 {
                                                        0 => (),
                                                        _ => {
                                                            let l11 =
                                                                *base.add(56).cast::<*mut u8>();
                                                            let l12 = *base.add(60).cast::<usize>();
                                                            _rt::cabi_dealloc(l11, l12, 1);
                                                        }
                                                    }
                                                    let l13 = *base.add(64).cast::<*mut u8>();
                                                    let l14 = *base.add(68).cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 8, 8);
                                                    let l16 = *base.add(72).cast::<*mut u8>();
                                                    let l17 = *base.add(76).cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                _ => {
                                                    let l19 = *base.add(24).cast::<*mut u8>();
                                                    let l20 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                    let l21 = *base.add(32).cast::<*mut u8>();
                                                    let l22 = *base.add(36).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                    let l23 = i32::from(*base.add(48).cast::<u8>());
                                                    match l23 {
                                                        0 => (),
                                                        _ => {
                                                            let l24 =
                                                                *base.add(52).cast::<*mut u8>();
                                                            let l25 = *base.add(56).cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                        }
                                                    }
                                                    let l26 = i32::from(*base.add(60).cast::<u8>());
                                                    match l26 {
                                                        0 => (),
                                                        _ => {
                                                            let l27 =
                                                                *base.add(64).cast::<*mut u8>();
                                                            let l28 = *base.add(68).cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                        }
                                                    }
                                                    let l29 = *base.add(72).cast::<*mut u8>();
                                                    let l30 = *base.add(76).cast::<usize>();
                                                    let base31 = l29;
                                                    let len31 = l30;
                                                    _rt::cabi_dealloc(base31, len31 * 8, 8);
                                                    let l32 = *base.add(80).cast::<*mut u8>();
                                                    let l33 = *base.add(84).cast::<usize>();
                                                    let base34 = l32;
                                                    let len34 = l33;
                                                    _rt::cabi_dealloc(base34, len34 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {
                                    let l35 = i32::from(*base.add(8).cast::<u8>());
                                    match l35 {
                                        0 => {
                                            let l36 = *base.add(12).cast::<*mut u8>();
                                            let l37 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l36, l37, 1);
                                        }
                                        1 => (),
                                        _ => (),
                                    }
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(base40, len40 * 96, 8);
                }
                pub trait Guest {
                    type Parser: GuestParser;
                }
                pub trait GuestParser: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]host:parse/parsing")]
                            extern "C" {
                                #[link_name = "[resource-new]parser"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]host:parse/parsing")]
                            extern "C" {
                                #[link_name = "[resource-rep]parser"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    fn parse(
                        &self,
                        data: _rt::Vec<u8>,
                        timestamp: Option<u64>,
                    ) -> _rt::Vec<Result<ParseReturn, Error>>;
                }
                #[doc(hidden)]

                macro_rules! __export_host_parse_parsing_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "host:parse/parsing#[constructor]parser"]
          unsafe extern "C" fn export_constructor_parser() -> i32 {
            $($path_to_types)*::_export_constructor_parser_cabi::<<$ty as $($path_to_types)*::Guest>::Parser>()
          }
          #[export_name = "host:parse/parsing#[method]parser.parse"]
          unsafe extern "C" fn export_method_parser_parse(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: i64,) -> *mut u8 {
            $($path_to_types)*::_export_method_parser_parse_cabi::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0, arg1, arg2, arg3, arg4)
          }
          #[export_name = "cabi_post_host:parse/parsing#[method]parser.parse"]
          unsafe extern "C" fn _post_return_method_parser_parse(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_method_parser_parse::<<$ty as $($path_to_types)*::Guest>::Parser>(arg0)
          }

          const _: () = {
            #[doc(hidden)]
            #[export_name = "host:parse/parsing#[dtor]parser"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn dtor(rep: *mut u8) {
              $($path_to_types)*::Parser::dtor::<
              <$ty as $($path_to_types)*::Guest>::Parser
              >(rep)
            }
          };

        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_host_parse_parsing_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_parse_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::host::parse::parsing::__export_host_parse_parsing_cabi!($ty with_types_in $($path_to_types_root)*::exports::host::parse::parsing);
  )
}
#[doc(inline)]
pub(crate) use __export_parse_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:parse:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 530] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x96\x03\x01A\x02\x01\
A\x02\x01B\x17\x01ks\x01pw\x01p}\x01r\x06\x04names\x04sizew\x0ccreated-date\0\x0d\
modified-date\0\x08messages\x01\x04data\x02\x04\0\x0aattachment\x03\0\x03\x01o\x02\
s\x04\x01q\x03\x07message\x01s\0\x0aattachment\x01\x04\0\x16message-and-attachme\
nt\x01\x05\0\x04\0\x0bparse-yield\x03\0\x06\x01k\x07\x01r\x02\x05value\x08\x06cu\
rsorw\x04\0\x0cparse-return\x03\0\x09\x01q\x03\x05parse\x01s\0\x0aincomplete\0\0\
\x03eof\0\0\x04\0\x05error\x03\0\x0b\x04\0\x06parser\x03\x01\x01i\x0d\x01@\0\0\x0e\
\x04\0\x13[constructor]parser\x01\x0f\x01h\x0d\x01kw\x01j\x01\x0a\x01\x0c\x01p\x12\
\x01@\x03\x04self\x10\x04data\x02\x09timestamp\x11\0\x13\x04\0\x14[method]parser\
.parse\x01\x14\x04\x01\x12host:parse/parsing\x05\0\x04\x01\x10host:parse/parse\x04\
\0\x0b\x0b\x01\0\x05parse\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit\
-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
