package host:parse;


interface parsing {
  record parse-return {
    value: option<parse-yield>,
    cursor: u64,
  }

  record attachment {
    name: string,
    size: u64,
    created-date: option<string>,
    modified-date: option<string>,
    messages: list<u64>,
    data: list<u8>,
  }


  variant parse-yield {
    message(string),
    attachment(attachment),
    message-and-attachment(tuple<string, attachment>),
  }

  variant error {
    parse(string),
    incomplete,
    eof,
  }

  resource results {
      add: func(item: result<parse-return, error>);
      add-range: func(items: list<result<parse-return, error>>);
  }
}

interface parse-client {
  use parsing.{attachment, parse-yield, error, parse-return, results};

  resource parser {
    constructor();
    parse: func(data: list<u8>, timestamp: option<u64>) -> list<result<parse-return, error>>;
    parse-res: func(data: list<u8>, timestamp: option<u64>, results: borrow<results>);
    parse-res-rng: func(data: list<u8>, timestamp: option<u64>, results: borrow<results>);
  }
}

world parse {
    use parsing.{attachment, parse-yield, error, parse-return, results};
    export parse-client;
}
