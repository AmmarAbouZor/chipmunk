package chipmunk:plugin@0.1.0;

interface bytesource-types {
  use logging.{level};

  /// Represents The input source for byte source to read from
  variant input-source {
    /// File input source with its path
    file(string),
    /// Socket Connection, identified with IP address and port
    socket(socket-info),
    /// Network source identified with URL
    url(string),
    /// Connection String for a Database
    db-conncectoin-string(string),
    /// In-Memory bytes buffer
    memory(list<u8>),
    /// Other types of input sources can be added here.
    other(string),
  }

  /// Represents the addresses defining a network socket
  record socket-info {
      ip: string,
      port: u16,
  }

  /// Represents the errors while reading bytes in bytesource plugin
  variant source-error {
    io(string),
    unsupported,
    other(string),
  }

  /// General configurations related to all bytesources
  record source-config {
    log-level: level,
  }
}

interface byte-source {
  use shared-types.{init-error};
  use bytesource-types.{input-source ,source-config, source-error};

  /// Initialize the bytesource with the given configurations
  init: func(input-source: input-source ,general-configs: source-config, plugin-configs: option<string>) -> result<_, init-error>;

  /// Reads more bytes returning a list of bytes with the given length if possible
  read: func(len: u64) -> result<list<u8>, source-error>;
}

world bytesource-plugin {
  import logging;
  export byte-source;
}
