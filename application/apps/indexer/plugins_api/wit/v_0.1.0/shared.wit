/// Interface used for shard types among all plugins 
interface shared-types {

  /// Represents a semantic version.
  record version {
    major: u16,
    minor: u16,
    patch: u16,
  }

  /// Error type while initializing the plugins
  variant init-error {
    config(string),
    io(string),
    unsupported(string),
    other(string),
  }

  /// Represents a configuration item, which includes an identifier and its corresponding value.
  record config-item {
    id: string,
    value: config-value,
  }

  /// Represents the value of a configuration item.
  variant config-value {
    boolean(bool),
    integer(s32),
    float(f32),
    text(string),
    /// List of strings representing directory paths.
    directories(list<string>),
    /// List of strings representing file paths.
    files(list<string>),
    /// A string representing a selected option from a drop-down menu
    dropdown(string)
  }

  /// Represents the schema for a configuration item.
  record config-schema-item {
    id: string,
    title: string,
    description: option<string>,
    input-type: config-schema-type,
  }

  /// Defines the possible input types for configuration schemas.
  variant config-schema-type {
    boolean,
    integer,
    float,
    text,
    /// A list of directories.
    directories,
    /// A list of types with the given allowed file extensions (Empty to allow all).
    files(list<string>),
    /// Drop-down input type with a list of selectable options.
    dropdown(list<string>)
  }
}

/// Logging definitions and methods for all plugins
interface logging {

  /// Log Level 
  enum level {
    error,
    warn,
    info,
    debug,
    trace,
  }

  /// Log the given message with current log level if log level is allowed
  log: func(level: level, msg: string);
}
