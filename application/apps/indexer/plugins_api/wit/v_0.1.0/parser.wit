package chipmunk:plugin@0.1.0;

interface parse-types {
  use logging.{level};

  /// General configurations related to all parsers
  record parser-config {
    log-level: level,
  }

  /// Return item for parsing call
  record parse-return {
    /// Parsed item or None if skipped
    value: option<parse-yield>,
    /// Consumed bytes count
    consumed: u64,
  }

  /// Represents a parsed item
  variant parse-yield {
    message(string),
    attachment(attachment),
    message-and-attachment(tuple<string, attachment>),
  }

  /// Attachment included within parsed item
  record attachment {
    name: string,
    size: u64,
    created-date: option<string>,
    modified-date: option<string>,
    /// The indexes of the message within the original trace (0-based).
    messages: list<u64>,
    /// Data as bytes
    data: list<u8>,
  }

  variant parse-error {
    unrecoverable(string),
    parse(string),
    incomplete,
    eof,
  }
}

interface parser {
  use shared-types.{init-error};
  use parse-types.{parser-config, parse-return, parse-error};
  
  /// Initialize the parser with the given configurations
  init: func(general-configs: parser-config, plugin-configs: option<string>) -> result<_, init-error>;

  /// Parse the given bytes returning a list of parsed items, 
  /// or parse error if an error occurred and no item has been parsed.
  parse: func(data: list<u8>, timestamp: option<u64>) -> result<list<parse-return>, parse-error>;

  /// Parse the given bytes returning the results to the host one by one using the function `add` provided by the host. 
  /// Otherwise it will return a parsing error only if
  parse-with-add: func(data: list<u8>, timestamp: option<u64>) -> result<_, parse-error>;
}

/// Provides methods to add parse items directly by the host
interface host-add {
  use parse-types.{parse-return, parse-error};

  /// Add parsed item one by one directly at the host memory
  add: func(item: parse-return);
}


world parse-plugin {
  import host-add;
  import logging;

  export parser;
}
