package chipmunk:plugin@0.1.0;

interface parse-types {
  use logging.{level};

  /// General configurations related to all parsers
  record parser-config {
    log-level: level,
  }

  /// Return item for parsing call
  record parse-return {
    /// Parsed item or None if skipped
    value: option<parse-yield>,
    /// Consumed bytes count
    consumed: u64,
  }

  /// Represents a parsed message with either a single line or multiple columns.
  variant parsed-message {
    /// Single string representing the message.
    line(string),
    /// List of strings representing the message split into columns.
    columns(list<string>),
  }

  /// Represents a parsed item
  variant parse-yield {
    message(parsed-message),
    attachment(attachment),
    message-and-attachment(tuple<parsed-message, attachment>),
  }

  /// Attachment included within parsed item
  record attachment {
    name: string,
    size: u64,
    created-date: option<string>,
    modified-date: option<string>,
    /// The indexes of the message within the original trace (0-based).
    messages: list<u64>,
    /// Data as bytes
    data: list<u8>,
  }

  variant parse-error {
    unrecoverable(string),
    parse(string),
    incomplete,
    eof,
  }

  /// Provides additional information to be rendered in the log view.
  record render-options {
    /// List of strings representing the header names to be rendered at the top of log messages.
    /// This list allows users to specify which columns are visible as well.
    /// 
    /// Note: Headers should be provided only if the log messages have multiple columns, and their 
    /// count must match the count of the columns of the log message as well.
    headers: option<list<string>>,
  }
}

interface parser {
  use shared-types.{version, init-error, config-item, config-schema-item};
  use parse-types.{render-options, parser-config, parse-return, parse-error};
 
  /// Provides the current semantic version of the plugin.
  /// This version is for the plugin only and is different from the plugin's API version.
  get-version: func() -> version;

  /// Provides the schemas for the configurations required by the plugin, which
  /// will be specified by the users.
  ///
  /// These schemas define the expected structure, types, and constraints
  /// for plugin-specific configurations. The values of these configurations
  /// will be passed to the initializing method of the parser.
  get-config-schemas: func() -> list<config-schema-item>;

  /// Provides the custom render options to be rendered in log view, enabling the users to 
  /// change the visibility on the log columns when provided.
  /// This function can be called before initializing the plugin instance.
  get-render-options: func() -> render-options;
  
  /// Initialize the parser with the given configurations
  init: func(general-configs: parser-config, plugin-configs: list<config-item>) -> result<_, init-error>;

  /// Parse the given bytes returning a list of parsed items, 
  /// or parse error if an error occurred and no item has been parsed.
  parse: func(data: list<u8>, timestamp: option<u64>) -> result<list<parse-return>, parse-error>;
}

world parse-plugin {
  import logging;

  export parser;
}
